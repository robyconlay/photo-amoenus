openapi: 3.0.0
info:
  version: '1.0'
  title: "Sprint #1"
  description: Voglio poter vedere le foto scattate in una determinata location per farmi unâ€™idea del posto, 
    potermi registrare, creare nuove location  
  license:
    name: MIT
servers:
  - url: http://assignments-api.herokuapp.com.com/api/v1
    description: Heroku
  - url: http://localhost:3000/api/v1
    description: Localhost
paths:
  /locations/{id}:
    get:
      description: >-
        Gets information about a specific location, identified by an ID
      summary: Get a location
      parameters:
        - in: path
          name: id
          schema:
            type: String
          required: true
          description: 'ID of the requested location'
      responses:
        '200':
          description: 'The location corresponding to the input ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: 'Insert ID doesn't exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /locations:
    get:
      description: >-
        Gets information about all existing locations
      summary: Get all locations
      parameters:
      responses:
        '200':
          description: 'All the existing locations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: 'There are no existing locations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    post:
      description: >-
        Creates a new location.
      summary: Create a new location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
                - city
                - description
                - locationImage
                - category
              proprieties:
                _id:
                  type: number
                  description: 'ID of the location in database'
                name:
                  type: string
                  description: 'name of the location'
                address:
                  type: string
                  description: 'address of the location'
                city:
                  type: string
                  description: 'city of the location'
                description:
                  type: string
                  description: 'description of the location'
                locationImage:
                  type: string
                  description: 'path of the image related to location'
                category:
                  type: string
                  description: 'category of the location'
                likes:
                  type: number
                  description: 'numeber of likes of the post'
      responses:
        '201':
          description: 'Location created. Link in the location header'
          header:
            'Location':
              schema:
                type: string
              description: Link to the created location.
        '500':
          description: 'Error in creating location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    patch:
      description: >-
        Changes any value of a location
      summary: Change values of location
      parameters:
        id: mongoose.Types.ObjectId
      requestBody:
        content:
          application/json:

      responses:
        '200':
          description: 'Location pathced'
        '500':
          description: 'Error in patching location'

/lib/favourites/:
    get:
      description: >-
        Gets favourites of 1 user
      summary: Get all locations in favourites of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		            - token
              properties:
		            token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'All the existing favourites of user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
        '404':
          description: 'User has no favourites'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
    delete:
      description: >-
        Deletes all favourites of 1 user, removes user from favourites table
      summary: Delete all locations in favourites of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		            - token
              properties:
		            token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'All favourite of a user deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'


   /lib/favourites/add/:id:
    patch:
      description: >-
        Add one location as favourite of 1 user
      summary: Add one location as favourite of 1 user
      parameters:
        - in: id of location
          name: id
          schema:
            type: mongoose.Types.ObjectId
          required: true
          description: 'ID of the location to add'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		            - token
              properties:
		            token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'Favourite added with success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
        '409':
          description: 'Location is already in user's favourites'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'

/lib/favourites/remove/:id:
    patch:
      description: >-
        Remove one location as favourite of 1 user
      summary: Remove one location as favourite of 1 user
      parameters:
        - in: id of location
          name: id
          schema:
            type: mongoose.Types.ObjectId
          required: true
          description: 'ID of the location to remove'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		            - token
              properties:
		            token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'Favourite deleted for user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'

/user/registration:
    post:
      description: >-
        Creates a new user in the system.
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		- id
		- username
                - email
		- password
              properties:
		_id:
                  type: objectId
                  description: 'Id of the user'
		username:
                  type: string
                  description: 'Username that will be shown in the site'
                email:
                  type: string
                  description: 'Email address of the user'
		password:
                  type: string
                  description: 'Password to access to the account'
      responses:                                                         //questa parte non ancora implementata
        '201':
          description: 'User created'
          headers:
              schema:
                type: string
              description: message of success.
	'500':
          description: 'Error in creating a new user'
          headers:
            content:
            application/json:
              schema:
                type: string
		description: message of error.
	'422':
          description: 'User already exist'
          headers:
            content:
            application/json:
              schema:
		type: string
		description: message of error.
		
/user/:id:
	delete:
      	 description: >-
         Deletes a particular user.
      	summary: Delete a user
      	parameters:
	  - in: path
          name: id
	  schema:
            type: String
	    description: 'id of the report'
        content:
          application/json:
            schema:
      responses:
        '200':
          description: 'User deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userScheme'
	'500':
          description: 'Error'
          content:
            application/json:
              schema:
		type: string
                description: "message of error"


		
/report:
    post:
      description: >-
        Creates a new report in the system.
      summary: Save a report from a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
		- _id
		- email
		- text
		- id_picture
              properties:
		id:
                  type: objectId
                  description: 'Id of the user'
		email:
	  	  type: string
	  	  description: 'email of the user of created the report'
		text:
                  type: string
                  description: 'The reason for the report'
		id_picture:
          	  type: String
          	  description: 'id of the picture that was reported'
      responses:                                                       
        '201':
          description: 'Report created'
          headers:
            'Report':
              schema:
                type: string
              description: Message of report sent with success.
	'500':
          description: 'Error in creating a new report'
          headers:
            content:
            application/json:
              schema:
                type: string
		description: Message of error.
		
report/:id:
	get:
      	 description: >-
          Get a specific report.
      	summary: Get a specific report.
      	parameters:
	  - in: path
          name: id
	  schema:
            type: String
	    description: 'id of the report'
      	responses:
         '200':
           description: 'Report of the passed id '
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/reportScheme'
	 '404':
           description: 'Error'
           content:
             application/json:
               schema:
		 type: string
                 description: "message of error"
		
/checkReports:
    get:
      description: >-
        Gets all the reports in the system.
      summary: Gets all the reports.
      parameters:
      responses:                                                       
        '200':
          description: 'All the existing report'
          content:
            application/json:
              schema:
		type: array
		items:
            	$ref: '#/components/schemas/reportScheme
	'404':
          description: 'there are not existing reports'
            content:
            application/json:
              schema:
		type: string
                description: message of error


components:
    userScheme:
      type: object
      required:
        - id
        - username
        - email
        - password
      properties:
        username:
          type: String
          description: 'Name of the location'
        email:
          type: String
          description: 'Email of the user'
        password:
          type: String
          description: 'Password of the user'
    locationScheme:
      type: object
      required:
        - id
        - name
        - address
        - city
        - description
        - locationImage
        - category
        - likes
      properties:
        id:
          type: String
          description: 'ID of the location'
        name:
          type: String
          description: 'Name of the location'
        address:
          type: String
          description: 'Address of the location'
        city:
          type: String
          description: 'City of the location'
        description:
          type: String
          description: 'Short description of the location'
        image:
          type: String
          description: 'Representative image of the location'
        category:
          type: String
          description: 'Most Representative category of the location'
        likes:
          type: Number
          description: 'Number of people who likes this element'  
    reportScheme:
      type: object
      required:
        - _id
	- email
        - text
	- id_picture
      properties:
        _id:
          type: String
          description: 'ID of the location'
	email:
	  type: string
	  description: 'email of the user of created the report'
        text:
          type: String
          description: 'Content of the report'
	id_picture:
          type: String
          description: 'id of the picture that was reported'
